import html2pdf from 'html2pdf.js';
import JSZip from 'jszip';
import { format } from 'date-fns';
import type { JournalEntry, ExportOptions } from '../types';

export class ExportService {
  private static formatDate(date: Date): string {
    return format(date, 'yyyy-MM-dd');
  }

  private static formatDateTime(date: Date): string {
    return format(date, 'yyyy-MM-dd HH:mm:ss');
  }

  private static sanitizeFilename(filename: string): string {
    return filename.replace(/[^\w\s-]/g, '').replace(/\s+/g, '-');
  }

  static async exportToPDF(entries: JournalEntry[], options: ExportOptions): Promise<void> {
    const htmlContent = this.generateHTMLForPDF(entries, options);

    const element = document.createElement('div');
    element.innerHTML = htmlContent;
    element.style.padding = '20px';
    element.style.fontFamily = 'system-ui, -apple-system, sans-serif';
    element.style.lineHeight = '1.6';
    element.style.color = '#333';

    const opt = {
      margin: 1,
      filename: `journal-export-${this.formatDate(new Date())}.pdf`,
      image: { type: 'jpeg' as const, quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: 'in' as const, format: 'letter', orientation: 'portrait' as const },
    };

    try {
      await html2pdf().set(opt).from(element).save();
    } catch (error) {
      console.error('PDF export failed:', error);
      throw new Error('Failed to export PDF');
    }
  }

  private static generateHTMLForPDF(entries: JournalEntry[], options: ExportOptions): string {
    const sortedEntries = entries.sort(
      (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );

    const header = `
      <div style="text-align: center; margin-bottom: 40px; border-bottom: 2px solid #075e54; padding-bottom: 20px;">
        <h1 style="color: #075e54; margin: 0; font-size: 28px;">Journal Export</h1>
        <p style="color: #666; margin: 10px 0 0 0; font-size: 14px;">
          By Jean-Eudes Assogba | Generated on ${this.formatDateTime(new Date())}
        </p>
        <p style="color: #666; margin: 5px 0 0 0; font-size: 12px;">
          Total entries: ${entries.length} | Visit: 
          <a href="https://jean-eudes.github.io/journal-pwa" style="color: #075e54;">Journal PWA</a>
        </p>
      </div>
    `;

    const entriesHTML = sortedEntries
      .map(
        entry => `
      <div style="margin-bottom: 40px; page-break-inside: avoid;">
        <div style="margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #e0e0e0;">
          <h2 style="color: #075e54; margin: 0 0 8px 0; font-size: 20px;">${this.escapeHTML(entry.title)}</h2>
          <div style="font-size: 12px; color: #666; display: flex; flex-wrap: wrap; gap: 15px;">
            <span><strong>Created:</strong> ${this.formatDateTime(entry.createdAt)}</span>
            <span><strong>Updated:</strong> ${this.formatDateTime(entry.updatedAt)}</span>
            <span><strong>Words:</strong> ${entry.wordCount}</span>
            ${entry.category ? `<span><strong>Category:</strong> ${this.escapeHTML(entry.category)}</span>` : ''}
            ${entry.mood ? `<span><strong>Mood:</strong> ${this.escapeHTML(entry.mood)}</span>` : ''}
          </div>
          ${
            options.includeTags && entry.tags.length > 0
              ? `
            <div style="margin-top: 8px;">
              ${entry.tags
                .map(
                  tag => `
                <span style="background: #f0f9ff; color: #075e54; padding: 2px 8px; border-radius: 12px; font-size: 11px; margin-right: 5px;">
                  #${this.escapeHTML(tag)}
                </span>
              `
                )
                .join('')}
            </div>
          `
              : ''
          }
        </div>
        <div style="white-space: pre-wrap; line-height: 1.8;">
          ${this.convertMarkdownToHTML(entry.content)}
        </div>
      </div>
    `
      )
      .join('');

    const footer = `
      <div style="margin-top: 50px; padding-top: 20px; border-top: 1px solid #e0e0e0; text-align: center; font-size: 12px; color: #666;">
        <p>Generated by Journal PWA - Jean-Eudes Assogba</p>
        <p>Visit: <a href="https://jean-eudes.github.io/journal-pwa" style="color: #075e54;">https://jean-eudes.github.io/journal-pwa</a></p>
        <p>© ${new Date().getFullYear()} Jean-Eudes Assogba. All rights reserved.</p>
      </div>
    `;

    return `<div>${header}${entriesHTML}${footer}</div>`;
  }

  static async exportToMarkdown(entries: JournalEntry[], options: ExportOptions): Promise<void> {
    if (entries.length === 1) {
      // Single entry export
      const entry = entries[0];
      const content = this.generateMarkdownContent([entry], options);
      const filename = `${this.sanitizeFilename(entry.title)}-${this.formatDate(entry.createdAt)}.md`;
      this.downloadFile(content, filename, 'text/markdown');
    } else {
      // Multiple entries - create ZIP
      const zip = new JSZip();

      // Add individual entry files
      for (const entry of entries) {
        const content = this.generateMarkdownContent([entry], options);
        const filename = `${this.sanitizeFilename(entry.title)}-${this.formatDate(entry.createdAt)}.md`;
        zip.file(filename, content);
      }

      // Add combined file
      const combinedContent = this.generateMarkdownContent(entries, options);
      zip.file(`journal-export-${this.formatDate(new Date())}.md`, combinedContent);

      // Add metadata file
      if (options.includeMetadata) {
        const metadata = this.generateMetadata(entries);
        zip.file('metadata.json', JSON.stringify(metadata, null, 2));
      }

      // Generate and download ZIP
      const zipBlob = await zip.generateAsync({ type: 'blob' });
      const url = URL.createObjectURL(zipBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `journal-export-${this.formatDate(new Date())}.zip`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  }

  private static generateMarkdownContent(entries: JournalEntry[], options: ExportOptions): string {
    const sortedEntries = entries.sort(
      (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );

    const header = `# Journal Export

Generated by **Journal PWA** - Jean-Eudes Assogba  
Export Date: ${this.formatDateTime(new Date())}  
Total Entries: ${entries.length}  
Website: [Journal PWA](https://jean-eudes.github.io/journal-pwa)

---

`;

    const entriesMarkdown = sortedEntries
      .map(entry => {
        let entryMd = `## ${entry.title}\n\n`;

        if (options.includeMetadata) {
          entryMd += `**Created:** ${this.formatDateTime(entry.createdAt)}  \n`;
          entryMd += `**Updated:** ${this.formatDateTime(entry.updatedAt)}  \n`;
          entryMd += `**Word Count:** ${entry.wordCount}  \n`;
          if (entry.category) entryMd += `**Category:** ${entry.category}  \n`;
          if (entry.mood) entryMd += `**Mood:** ${entry.mood}  \n`;
          if (entry.location) entryMd += `**Location:** ${entry.location}  \n`;
          if (entry.weather) entryMd += `**Weather:** ${entry.weather}  \n`;
        }

        if (options.includeTags && entry.tags.length > 0) {
          entryMd += `**Tags:** ${entry.tags.map(tag => `#${tag}`).join(', ')}  \n`;
        }

        entryMd += '\n' + entry.content + '\n\n---\n\n';

        return entryMd;
      })
      .join('');

    const footer = `

---

*Generated by Journal PWA - Jean-Eudes Assogba*  
*© ${new Date().getFullYear()} Jean-Eudes Assogba. All rights reserved.*  
*Visit: [https://jean-eudes.github.io/journal-pwa](https://jean-eudes.github.io/journal-pwa)*
`;

    return header + entriesMarkdown + footer;
  }

  private static generateMetadata(entries: JournalEntry[]) {
    const allTags = [...new Set(entries.flatMap(entry => entry.tags))];
    const categories = [...new Set(entries.map(entry => entry.category).filter(Boolean))];
    const totalWordCount = entries.reduce((sum, entry) => sum + entry.wordCount, 0);

    return {
      exportDate: new Date().toISOString(),
      totalEntries: entries.length,
      totalWordCount,
      dateRange: {
        earliest: Math.min(...entries.map(e => new Date(e.createdAt).getTime())),
        latest: Math.max(...entries.map(e => new Date(e.createdAt).getTime())),
      },
      allTags,
      categories,
      entryStats: entries.map(entry => ({
        id: entry.id,
        title: entry.title,
        wordCount: entry.wordCount,
        createdAt: entry.createdAt,
        updatedAt: entry.updatedAt,
        tags: entry.tags,
        category: entry.category,
      })),
      generator: 'Journal PWA by Jean-Eudes Assogba',
      website: 'https://jean-eudes.github.io/journal-pwa',
    };
  }

  private static convertMarkdownToHTML(markdown: string): string {
    // Basic markdown to HTML conversion for PDF
    return markdown
      .replace(/^### (.*$)/gim, '<h3 style="color: #075e54; margin: 20px 0 10px 0;">$1</h3>')
      .replace(/^## (.*$)/gim, '<h2 style="color: #075e54; margin: 25px 0 15px 0;">$1</h2>')
      .replace(/^# (.*$)/gim, '<h1 style="color: #075e54; margin: 30px 0 20px 0;">$1</h1>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(
        /`(.*?)`/g,
        '<code style="background: #f5f5f5; padding: 2px 4px; border-radius: 3px;">$1</code>'
      )
      .replace(/^- (.*$)/gim, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ul style="margin: 10px 0;">$1</ul>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/^/, '<p>')
      .replace(/$/, '</p>');
  }

  private static escapeHTML(text: string): string {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  private static downloadFile(content: string, filename: string, mimeType: string): void {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  static async exportToJSON(entries: JournalEntry[], options: ExportOptions): Promise<void> {
    const exportData = {
      metadata: {
        exportDate: new Date().toISOString(),
        generator: 'Journal PWA by Jean-Eudes Assogba',
        website: 'https://jean-eudes.github.io/journal-pwa',
        totalEntries: entries.length,
        copyright: `© ${new Date().getFullYear()} Jean-Eudes Assogba`,
      },
      entries: options.includeMetadata
        ? entries
        : entries.map(entry => {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { createdAt, updatedAt, wordCount, ...cleanEntry } = entry;
            return cleanEntry;
          }),
    };

    const content = JSON.stringify(exportData, null, 2);
    const filename = `journal-export-${this.formatDate(new Date())}.json`;
    this.downloadFile(content, filename, 'application/json');
  }
}
